

#include<bits/stdc++.h>

public class SJF_NON
 {


// Method to find the waiting time for all

// processes

/**
*
* @param bt burst time of each process

* @param art arrival time of each process

* @param n   number of processes

* @param wt  waiting time of each process

*/

static void findWaitingTime(int[] bt,int[] art, int n, int wt[])

{

int complete = 0, t = 0, max1 = 0;

int longest = 0;

boolean check = false;

int rt[] = new int[n];

// Copy the burst time into rt[]

for (int i = 0; i < n; i++)

rt[i] = bt[i];

// Process until all processes gets completed

while (complete != n) 
{


// Find process with minimum

// remaining time among the

// processes that arrives till the

// current time`

for(int j = 0;j < n;j++) 

{

if ((art[j]<= t) && rt[j]>max1 && rt[j] > 0)
 {

   min1 = rt[j];
            
   longest = j;
      
   check = true;
            
 }
         
}
   
         
if (check == false)
 {
           
   t++;
             
   continue;
        
 }
   
         // Reduce remaining time by one
        
t=t+rt[longest];
        
rt[longest]=0;
         
complete++;
         
         
wt[longest] = t-bt[longest]-art[longest];
   
         // Update maximum
         
max1 = rt[longest];
         
if (max1 == 9999)
            
 max1=0;
   
      
   
             
if (wt[longest] < 0)
                
 wt[longest] = 0;
         
         // Increment time
         
     
}
 
}
 

// Method to calculate turn around time
 
/**
  * 
  
* @param bt burst time
  
* @param n  number of processes
  
* @param wt waiting time of each process
  
* @param tat total turn around time

*/

 
static void findTurnAroundTime(int bt[], int n,int wt[], int tat[])
 
{
     
// calculating turnaround time by adding
     
// bt[i] + wt[i]
     
for (int i = 0; i < n; i++)
         
tat[i] = bt[i] + wt[i];
 
}
 
 
// Method to calculate average time
 
/**
  * 
  
* @param bt  burst time  
 
* @param art arrival time of each process
  
* @param n   total number of processes
 
* @param p   process id
  
*/
 
static void findavgTime(int[] bt,int[] art, int n,int[] p)
 
{
     
int wt[n];
     
int tat[n];
     
int  total_wt = 0, total_tat = 0;
   
    
// Function to find waiting time of all
     
// processes
     
findWaitingTime(bt,art, n, wt);
   
     
// Function to find turn around time for
     
// all processes
     
findTurnAroundTime(bt,n, wt, tat);
   
     
// Display processes along with all
     
// details
     
cout<<"Processes " <<" Burst time " <<" Waiting time " <<" Turn around time";
   
     
// Calculate total waiting time and
     
// total turnaround time
     
for (int i = 0; i < n; i++) 
{
         
total_wt = total_wt + wt[i];
         
total_tat = total_tat + tat[i];
         
cout<<" " <<"\t\t"<<bt[i]<<"\t\t "<<wt[i] <<"\t\t"<<tat[i];
     
}
   
     
cout<<"Average waiting time = " <<(float)total_wt / (float)n);
     
cout<<"Average turn around time = " <<(float)total_tat / (float)n);
 
}
  
 
// Driver Method
 
/**
  * 
  
* @param args
  
*/
 
void main()
 
{
     
    
int n=3;
     
int bt[3];
     
int art[3];;
    
     
    
int p[3]={2132,2102,2453};
     
for(int i=0;i<n;i++)
     
{
         
         
cout<<"Enter arrival time "<<(i+1)<<" process:";
         
cin<<art[i];
         
cout<<"Enter burst time "<<(i+1)<<" process:";
         
cin<<bt[i];
    
 } 
     
findavgTime(bt,art,n,p);
   

    }

 } 
